#!/bin/bash

# Register custom commands by sourcing them in shell profile
# Makes custom shell functions and completions available globally

SCRIPT_DIR="$HOME/custom-commands"
COMMANDS_DIR="$SCRIPT_DIR/commands"
SHELL_NAME=$(basename "$SHELL")

# Determine the correct profile file based on shell
case "$SHELL_NAME" in
    "zsh")
        PROFILE_FILE="$HOME/.zshrc"
    ;;
    "bash")
        if [[ -f "$HOME/.bash_profile" ]]; then
            PROFILE_FILE="$HOME/.bash_profile"
        else
            PROFILE_FILE="$HOME/.bashrc"
        fi
    ;;
    *)
        echo "Unsupported shell: $SHELL_NAME"
        exit 1
    ;;
esac

echo "Registering custom commands for $SHELL_NAME..."
echo "Profile file: $PROFILE_FILE"

# Find all sourceable scripts (those with shell functions) in root
sourceable_scripts=()
executable_scripts=()

# Check root directory for sourceable scripts (functions, completions)
for script in "$SCRIPT_DIR"/*; do
    if [[ -f "$script" ]] && [[ "$(basename "$script")" != "register-commands.sh" ]] && [[ "$(basename "$script")" != "package.json" ]] && [[ "$(basename "$script")" != "README.md" ]] && [[ "$(basename "$script")" != "llm.txt" ]] && [[ "$(basename "$script")" != *.* ]]; then
        script_name="$(basename "$script")"
        
        # Check if script is a Bash script by shebang
        if head -n 1 "$script" | grep -q '^#![[:space:]]*/bin/bash'; then
            # Skip bash scripts in root (they should be in commands/)
            continue
        else
            # If not a Bash script, treat as sourceable (e.g., shell functions, completions)
            sourceable_scripts+=("$script_name")
        fi
    fi
done

# Find all executable commands in commands directory
if [[ -d "$COMMANDS_DIR" ]]; then
    for script in "$COMMANDS_DIR"/*; do
        if [[ -f "$script" ]]; then
            script_name="$(basename "$script")"
            executable_scripts+=("$script_name")
            chmod +x "$script"
        fi
    done
fi

# Create or update the sourcing section in profile
MARKER_START="# === Custom Commands Auto-Generated ==="
MARKER_END="# === End Custom Commands ==="

# Remove existing auto-generated section
if [[ -f "$PROFILE_FILE" ]]; then
    # Create a backup
    cp "$PROFILE_FILE" "$PROFILE_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Remove old section if it exists
    sed -i.tmp "/$MARKER_START/,/$MARKER_END/d" "$PROFILE_FILE"
    rm -f "$PROFILE_FILE.tmp"
fi

# Add new sourcing section
{
    echo ""
    echo "$MARKER_START"
    echo "# Auto-generated by register-commands.sh"
    echo "# Do not edit this section manually"
    echo ""
    
    # Add commands directory to PATH
    echo "# Add custom commands directory to PATH"
    echo "export PATH=\"$COMMANDS_DIR:\$PATH\""
    echo ""
    
    for script in "${sourceable_scripts[@]}"; do
        echo "# Source $script for shell functions and completions"
        echo "if [[ -f \"$SCRIPT_DIR/$script\" ]]; then"
        echo "    source \"$SCRIPT_DIR/$script\""
        echo "fi"
        echo ""
    done
    
    echo "$MARKER_END"
} >> "$PROFILE_FILE"

echo ""
echo "Registration complete!"
echo ""
echo "Sourceable commands (${#sourceable_scripts[@]} total):"
for cmd in "${sourceable_scripts[@]}"; do
    echo "  ✓ $cmd (sourced for functions/completions)"
done

echo ""
echo "Executable commands (${#executable_scripts[@]} total):"
for cmd in "${executable_scripts[@]}"; do
    echo "  ✓ $cmd (executable in PATH)"
done

echo ""
echo "To activate the changes:"
echo "  source $PROFILE_FILE"
echo ""
echo "Or restart your terminal session."