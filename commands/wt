#!/bin/bash

# Git worktree manager with Cursor integration
# Creates/removes worktrees and opens them in Cursor

# Load config utilities
source "$(dirname "$(dirname "$0")")/scripts/config-utils.sh"

# Get username from config
username=$(get_username)

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    if [[ -f "$(dirname "$(dirname "$0")")/help/wt.help" ]]; then
        echo -e "$(cat "$(dirname "$(dirname "$0")")/help/wt.help")"
    else
        echo "Help file not found"
    fi
    exit 0
fi

# Handle list subcommand
if [[ "$1" == "ls" || "$1" == "list" ]]; then
    # Get all worktrees
    worktrees=$(git worktree list --porcelain 2>/dev/null)
    
    if [[ -z "$worktrees" ]]; then
        echo "No git repository found"
        exit 1
    fi
    
    # Parse worktree information
    echo -e "\033[1;36mWorktrees:\033[0m"
    echo ""
    
    current_dir=""
    current_branch=""
    current_commit=""
    is_main=false
    
    while IFS= read -r line; do
        if [[ "$line" =~ ^worktree[[:space:]](.+) ]]; then
            # If we have a previous worktree, print it
            if [[ -n "$current_dir" ]]; then
                # Format the output
                if [[ "$is_main" == true ]]; then
                    echo -e "\033[1;32m● $(basename "$current_dir")\033[0m (main)"
                else
                    echo -e "\033[1;34m● $(basename "$current_dir")\033[0m"
                fi
                echo "  Path: $current_dir"
                if [[ -n "$current_branch" ]]; then
                    echo "  Branch: $current_branch"
                fi
                echo "  Commit: ${current_commit:0:7}"
                echo ""
            fi
            
            # Start new worktree
            current_dir="${BASH_REMATCH[1]}"
            current_branch=""
            current_commit=""
            is_main=false
        elif [[ "$line" =~ ^HEAD[[:space:]]([a-f0-9]+) ]]; then
            current_commit="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ ^branch[[:space:]]refs/heads/(.+) ]]; then
            current_branch="${BASH_REMATCH[1]}"
        elif [[ "$line" == "bare" ]]; then
            is_main=true
        fi
    done <<< "$worktrees"
    
    # Print the last worktree
    if [[ -n "$current_dir" ]]; then
        if [[ "$is_main" == true ]]; then
            echo -e "\033[1;32m● $(basename "$current_dir")\033[0m (main)"
        else
            echo -e "\033[1;34m● $(basename "$current_dir")\033[0m"
        fi
        echo "  Path: $current_dir"
        if [[ -n "$current_branch" ]]; then
            echo "  Branch: $current_branch"
        fi
        echo "  Commit: ${current_commit:0:7}"
    fi
    
    # Count worktrees
    worktree_count=$(echo "$worktrees" | grep "^worktree" | wc -l | tr -d ' ')
    if [[ $worktree_count -gt 1 ]]; then
        echo ""
        echo "Total: $worktree_count worktrees"
    fi
    
    exit 0
fi

# Handle remove subcommand
if [[ "$1" == "rm" ]]; then
    shift
    
    # List existing worktrees
    worktrees=$(git worktree list --porcelain | grep "^worktree" | cut -d' ' -f2- | tail -n +2)
    
    if [[ -z "$worktrees" ]]; then
        echo "No worktrees to remove"
        exit 0
    fi
    
    echo "Select worktree to remove:"
    echo "$worktrees" | nl -v 1
    read -p "Enter number (or 0 to cancel): " choice
    
    if [[ "$choice" == "0" ]]; then
        echo "Cancelled"
        exit 0
    fi
    
    selected=$(echo "$worktrees" | sed -n "${choice}p")
    
    if [[ -z "$selected" ]]; then
        echo "Invalid selection"
        exit 1
    fi
    
    # Get the branch name from the worktree
    branch=$(git -C "$selected" branch --show-current 2>/dev/null || echo "")
    
    echo "Will remove worktree: $selected"
    if [[ -n "$branch" ]]; then
        echo "Associated branch: $branch"
    fi
    
    read -p "Are you sure? (y/N): " confirm
    
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        # Remove worktree
        git worktree remove "$selected" --force 2>/dev/null || git worktree remove "$selected"
        
        # Ask about branch deletion if it exists
        if [[ -n "$branch" ]]; then
            read -p "Also delete branch '$branch'? (y/N): " delete_branch
            if [[ "$delete_branch" == "y" || "$delete_branch" == "Y" ]]; then
                git branch -D "$branch" 2>/dev/null || echo "Could not delete branch (may be checked out elsewhere)"
            fi
        fi
        
        echo "Worktree removed successfully"
    else
        echo "Cancelled"
    fi
    exit 0
fi

# Get worktree types from config
worktree_types=$(get_worktree_types)
types_array=($worktree_types)

# Create new worktree
echo "Branch type:"
i=1
for wt_type in "${types_array[@]}"; do
    echo "$i) $wt_type"
    ((i++))
done
echo "$i) custom"

read -p "Select (1-$i): " choice

if [[ $choice -ge 1 && $choice -le ${#types_array[@]} ]]; then
    type="${types_array[$((choice-1))]}"
elif [[ $choice -eq $i ]]; then
    read -p "Enter custom type: " type
    type=$(echo "$type" | tr ' ' '-')
else
    echo "Invalid choice"
    exit 1
fi

read -p "Branch name (leave empty for random): " name

if [ -z "$name" ]; then
    # Generate random UUID-like string (8 chars)
    name=$(openssl rand -hex 4)
else
    # Replace spaces with hyphens
    name=$(echo "$name" | tr ' ' '-')
fi

branch_name="${username}/${type}/${name}"

# Get the repository root
repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
if [[ -z "$repo_root" ]]; then
    echo "Not in a git repository"
    exit 1
fi

# Create worktree directory name (use last part of branch name for simplicity)
worktree_dir="${repo_root}/../$(basename "$repo_root")-${type}-${name}"

# Create the worktree with a new branch
echo "Creating worktree at: $worktree_dir"
echo "With branch: $branch_name"

if git worktree add "$worktree_dir" -b "$branch_name" 2>/dev/null; then
    echo "Worktree created successfully"
    
    # Open in Cursor if available
    if command -v cursor &> /dev/null; then
        echo "Opening in Cursor..."
        cursor "$worktree_dir"
    elif command -v code &> /dev/null; then
        echo "Cursor not found, opening in VS Code..."
        code "$worktree_dir"
    else
        echo "No editor found. Worktree created at: $worktree_dir"
    fi
    
    echo ""
    echo "To navigate to the worktree:"
    echo "  cd $worktree_dir"
    echo ""
    echo "To remove this worktree later:"
    echo "  wt rm"
else
    echo "Failed to create worktree"
    exit 1
fi